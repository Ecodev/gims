<?xml version="1.0" encoding="UTF-8"?>

<project name="GIMS" default="build">

    <taskdef classname="tasks.CreateDump" name="create-dump" />
    <taskdef classname="tasks.LoadDump" name="load-dump" />
    <taskdef classname="tasks.LoadRemoteDump" name="load-remote-dump" />

    <target name="dump-data">
        <propertyprompt propertyName="dumpFile" defaultValue="db.sql.gz" promptText="Path to gzipped DB dump to be created" useExistingValue="true" />
        <create-dump dumpfile="${dumpFile}" />
    </target>

    <target name="load-data">
        <propertyprompt propertyName="dumpFile" defaultValue="db.sql.gz" promptText="Path to gzipped DB dump" useExistingValue="true" />
        <load-dump dumpfile="${dumpFile}" />
    </target>

    <target name="set-permissions">
        <echo msg="mkdir cache, logs, ..." />
        <mkdir dir="data/cache" />
        <mkdir dir="data/logs" />
        <mkdir dir="htdocs/tmp" />
        <mkdir dir="htdocs/css" />
        <echo msg="setfacl default r/o for gimsinitiativeorg-www" />
        <exec command="sudo setfacl -R -m u:gimsinitiativeorg-www:r-x -m d:u:gimsinitiativeorg-www:r-x ./" />
        <echo msg="setfacl r/w on cache,logs for gimsinitiativeorg-www" />
        <exec command="sudo setfacl -R -m u:gimsinitiativeorg-www:rwx -m d:u:gimsinitiativeorg-www:rwx data/logs data/cache data/session/" />
        <exec command="sudo chmod 0770 ./" />
    </target>

    <target name="load-test-data" description="Load data for tests">
        <load-dump dumpfile="tests/data/db.sql.gz" />
    </target>

    <target name="load-remote-data" description="Load data from a remote server into local database">
        <propertyprompt propertyName="remote" defaultValue="gimsinitiative.org" promptText="Remote host (eg: remote.hostname.com)" useExistingValue="true" />
        <load-remote-dump remote="${remote}" />
    </target>

    <!-- Install all PHP dependencies via composer -->
    <target name="composer-install">
        <exec command="composer install --dev --prefer-source" checkreturn="true" logoutput="/dev/stdout" passthru="true" />
    </target>

    <!-- ============================================  -->
    <!-- Target: build                                 -->
    <!-- ============================================  -->
    <target name="build" depends="composer-install" description="Build all assets for a fully functionnal application (DB, CSS, JS)">
        <exec command="./bin/build.sh" checkreturn="true" logoutput="/dev/stdout" passthru="true" />
    </target>

    <!-- ============================================  -->
    <!-- Delete all temporary files                    -->
    <!-- ============================================  -->
    <target name="clean">
        <echo msg="Clean..." />
        <delete includeemptydirs="true" quiet="true">
            <fileset dir="data/logs" includes="**/*" excludes="**/.gitkeep" />
        </delete>
        <delete quiet="true">
            <fileset dir="data/cache">
                <include name="*" />
            </fileset>
        </delete>
        <delete dir="data/cache/DoctrineORMModule/" includeemptydirs="true" quiet="true"/>
        <delete dir="data/cache/sass/" includeemptydirs="true" quiet="true"/>
        <delete dir="data/docs/api/" includeemptydirs="true" quiet="true"/>
        <delete dir="htdocs/css/" includeemptydirs="true" quiet="true"/>
        <delete dir="htdocs/tmp/" includeemptydirs="true" quiet="true"/>
        <delete dir="vendor/" includeemptydirs="true" quiet="true"/>
        <delete dir="node_modules/" includeemptydirs="true" quiet="true"/>
    </target>

    <target name="test" depends="validate-schema,phpunit,karma-unit,protractor-e2e" description="Run all tests available">
        <echo msg="Testing done" />
    </target>

    <target name="travis" depends="validate-schema,phpunit,karma-unit" description="Run all tests available">
        <echo msg="Testing done" />
    </target>

    <target name="validate-schema" depends="build">
        <echo msg="Validating schema..." />
        <exec command="./vendor/bin/doctrine-module orm:validate-schema" checkreturn="true" logoutput="/dev/stdout" passthru="true" />
    </target>

    <target name="insert-test-user">
        <echo msg="Inserting a test user with full access on published data..." />

        <!--Create test user-->
        <exec command="./vendor/bin/doctrine-module dbal:run-sql &quot;DELETE FROM user WHERE email = 'gims@gims.pro'&quot;" checkreturn="true" logoutput="/dev/stdout" passthru="true" />
        <exec command="./vendor/bin/doctrine-module dbal:run-sql &quot;INSERT INTO user (name, email, password, state) VALUES ('Test user', 'gims@gims.pro', '\$2y\$14\$14RCodMvODT60.O2FlzWwOm4/SepVzPh6Pl4vFFpKwN5tUso7RIJ6', 1);&quot;" checkreturn="true" logoutput="/dev/stdout" passthru="true" />

        <!--Give Survey Editor role to survey with strictly only published questionnaires-->
        <exec command="./vendor/bin/doctrine-module dbal:run-sql &quot;INSERT INTO user_survey (user_id, role_id, survey_id) SELECT user.id, 5, survey.id FROM survey, user WHERE user.email = 'gims@gims.pro' AND survey.id NOT IN (SELECT survey_id FROM questionnaire WHERE questionnaire.status != 'published');&quot;" checkreturn="true" logoutput="/dev/stdout" passthru="true" />

        <!--Give Questionnaire Reporter role only to published questionnaires-->
        <exec command="./vendor/bin/doctrine-module dbal:run-sql &quot;INSERT INTO user_questionnaire (user_id, role_id, questionnaire_id) SELECT user.id, 3, questionnaire.id FROM questionnaire, user WHERE user.email = 'gims@gims.pro' AND questionnaire.status = 'published';&quot;" checkreturn="true" logoutput="/dev/stdout" passthru="true" />

        <!--Give Filter Editor role to all filterSet-->
        <exec command="./vendor/bin/doctrine-module dbal:run-sql &quot;INSERT INTO user_filter_set (user_id, role_id, filter_set_id) SELECT user.id, 6, filter_set.id from filter_set, user WHERE user.email = 'gims@gims.pro';&quot;" checkreturn="true" logoutput="/dev/stdout" passthru="true" />
    </target>

    <target name="phpunit" depends="build, load-test-data">
        <echo msg="Testing phpunit..." />
        <property environment="env" />

        <if>
            <isset property="env.TEST_GROUP"/>
            <then>
                <property name="group_argument" value="--group ${env.TEST_GROUP}" />
            </then>
            <else>
                <property name="group_argument" value="" />
            </else>
        </if>

        <echo message="TEST_GROUP: ${group_argument}" />
        <exec command="./vendor/bin/phpunit ${group_argument} --coverage-clover ./data/logs/tests/coverage-clover.xml" checkreturn="true" logoutput="/dev/stdout" passthru="true" />
    </target>

    <target name="karma-unit" depends="build">
        <echo msg="Testing karma-unit..." />
        <exec command="./node_modules/.bin/karma start --no-auto-watch --single-run --browsers cli config/karma-unit.conf.js" checkreturn="true" logoutput="/dev/stdout" passthru="true" />
    </target>

    <target name="protractor-e2e" depends="build">
        <echo msg="Testing protractor-e2e..." />
        <exec command="./node_modules/.bin/protractor config/protractor.conf.js --verbose" checkreturn="true" logoutput="/dev/stdout" passthru="true" />
    </target>
</project>
